{"version":3,"sources":["store/players/types.ts","components/PlayerItem.tsx","containers/PlayersContainer.tsx","store/players/actions.ts","store/players/reducers.ts","store/index.ts","index.tsx","App.tsx"],"names":["Suit","Rank","ADD_PLAYER","DELETE_PLAYER","TOGGLE_PLAYER_DONE","UPDATE_PLAYER_SUIT","UPDATE_PLAYER_RANK","UPDATE_PLAYER_BEN","UPDATE_PLAYER_WT","UPDATE_PLAYER_FT","UPDATE_PLAYER_NOTES","SORT_INIT","RESET_INIT","PlayerItem","require","props","rowDoneClass","player","done","TableRow","className","TableCell","Button","color","onClick","handleDelete","idx","Delete","ToggleButton","selected","toggleDone","Check","name","rankDropdown","suitDropdown","TextField","type","value","bennies","onChange","e","updateBen","Number","target","inputProps","min","max","step","woundsTaken","updateWt","fatigueTaken","updateFt","TextareaAutosize","rowsMax","notes","updateNotes","options","i","item","Object","keys","length","push","label","transformRankWord","selectedOption","rank","FormControl","Select","event","updateRank","map","MenuItem","word","suit","updateSuit","PlayersContainer","handleTextChange","setState","playerInput","handleButtonClick","addPlayer","state","handleDeleteButtonClick","console","log","deletePlayer","playerJSX","this","playerList","key","Table","size","stickyHeader","width","TableHead","TableBody","placeholder","variant","sortInit","resetInit","React","connect","store","count","players","list","dispatch","payload","num","str","initialState","rootReducer","combineReducers","action","NA","oldList","splice","newList","doneList","suitList","rankList","benlist","wtlist","ftlist","notelist","resetlist","forEach","p","sortList","sort","a","b","createStore","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.cd46dfef.chunk.js","sourcesContent":["// Describing the shape of the players's slice of state\r\n\r\nexport enum Suit {\r\n    NA = 1,\r\n    Clubs,\r\n    Diamonds,\r\n    Hearts,\r\n    Spades,\r\n    Color,\r\n    Black\r\n}\r\n\r\nexport enum Rank {\r\n    NA = 1,\r\n    Two,\r\n    Three,\r\n    Four,\r\n    Five,\r\n    Six,\r\n    Seven,\r\n    Eight,\r\n    Nine,\r\n    Ten,\r\n    Jack,\r\n    Queen,\r\n    King,\r\n    Ace,\r\n    Joker\r\n}\r\n\r\nexport interface Player {\r\n    name: string;\r\n    bennies: number;\r\n    woundsTaken: number;\r\n    fatigueTaken: number;\r\n    notes: string;\r\n    done: boolean;\r\n    rank: number;\r\n    suit: number;\r\n}\r\n\r\nexport interface PlayersState {\r\n    count: number;\r\n    list: Player[];\r\n}\r\n\r\n// Describing the different ACTION NAMES available  \r\nexport const ADD_PLAYER = \"ADD_PLAYER\";\r\nexport const DELETE_PLAYER = \"DELETE_PLAYER\";\r\nexport const TOGGLE_PLAYER_DONE = \"TOGGLE_PLAYER_DONE\";\r\nexport const UPDATE_PLAYER_SUIT = \"UPDATE_PLAYER_SUIT\";\r\nexport const UPDATE_PLAYER_RANK = \"UPDATE_PLAYER_RANK\";\r\nexport const UPDATE_PLAYER_BEN = \"UPDATE_PLAYER_BEN\";\r\nexport const UPDATE_PLAYER_WT = \"UPDATE_PLAYER_WT\";\r\nexport const UPDATE_PLAYER_FT = \"UPDATE_PLAYER_FT\";\r\nexport const UPDATE_PLAYER_NOTES = \"UPDATE_PLAYER_NOTES\";\r\nexport const SORT_INIT = \"SORT_INIT\";\r\nexport const RESET_INIT = \"RESET_INIT\";\r\n\r\nexport interface AddPlayerAction {\r\n    type: typeof ADD_PLAYER;\r\n    payload: string;\r\n}\r\n\r\nexport interface DeletePlayerAction {\r\n    type: typeof DELETE_PLAYER;\r\n    payload: number;\r\n}\r\n\r\nexport interface TogglePlayerDoneAction {\r\n    type: typeof TOGGLE_PLAYER_DONE;\r\n    payload: number;\r\n}\r\n\r\nexport interface PlayerNumberPayload {\r\n    player: number;\r\n    num: number;\r\n}\r\n\r\nexport interface PlayerStringPayload {\r\n    player: number;\r\n    str: string;\r\n}\r\n\r\nexport interface UpdatePlayerSuitAction {\r\n    type: typeof UPDATE_PLAYER_SUIT;\r\n    payload: PlayerNumberPayload;\r\n}\r\n\r\nexport interface UpdatePlayerRankAction {\r\n    type: typeof UPDATE_PLAYER_RANK;\r\n    payload: PlayerNumberPayload;\r\n}\r\n\r\nexport interface UpdatePlayerBenAction {\r\n    type: typeof UPDATE_PLAYER_BEN;\r\n    payload: PlayerNumberPayload;\r\n}\r\n\r\nexport interface UpdatePlayerFtAction {\r\n    type: typeof UPDATE_PLAYER_FT;\r\n    payload: PlayerNumberPayload;\r\n}\r\n\r\nexport interface UpdatePlayerWtAction {\r\n    type: typeof UPDATE_PLAYER_WT;\r\n    payload: PlayerNumberPayload;\r\n}\r\n\r\nexport interface UpdatePlayerNotesAction {\r\n    type: typeof UPDATE_PLAYER_NOTES;\r\n    payload: PlayerStringPayload;\r\n}\r\n\r\nexport interface ResetInitAction {\r\n    type: typeof RESET_INIT;\r\n}\r\n\r\nexport interface SortInitAction {\r\n    type: typeof SORT_INIT;\r\n}\r\n\r\nexport type PlayerActionTypes = \r\nAddPlayerAction | DeletePlayerAction | TogglePlayerDoneAction | UpdatePlayerRankAction | UpdatePlayerSuitAction\r\n| UpdatePlayerRankAction | UpdatePlayerBenAction \r\n| UpdatePlayerFtAction | UpdatePlayerWtAction | UpdatePlayerNotesAction | ResetInitAction | SortInitAction ;","import * as React from \"react\";\r\nimport {Player, Rank, Suit} from \"../store/players/types\"\r\nimport {Delete, Check} from \"@material-ui/icons\"\r\nimport { Button, Select, TableCell, TableRow,TextField, MenuItem, FormControl, FormHelperText, InputLabel, TextareaAutosize } from '@material-ui/core';\r\nimport { ToggleButton } from '@material-ui/lab';\r\nimport './PlayerItem.css';\r\nvar NumericInput = require('react-numeric-input');\r\n\r\ninterface PlayerItemProps {\r\n  player: Player;\r\n  idx: number;\r\n  handleDelete: (idx: number) => void;\r\n  updateSuit: (idx: number, num: number) => void;\r\n  updateRank: (idx: number, num: number) => void;\r\n  updateWt: (idx: number, num: number) => void;\r\n  updateFt: (idx: number, num: number) => void;\r\n  updateBen: (idx: number, num: number) => void;\r\n  updateNotes: (idx: number, notes: string) => void;\r\n  toggleDone: (idx: number) => void;\r\n}\r\n\r\n\r\nexport const PlayerItem: React.FC<PlayerItemProps> = props => {\r\n  const rowDoneClass = props.player.done ? \"PlayerDone\" : \"\"\r\n  return (\r\n    <TableRow className={rowDoneClass}>\r\n      <TableCell className=\"PlayerButton\">\r\n      <Button\r\n        className=\"DeletePlayerButton\"\r\n        color=\"secondary\"\r\n        onClick={() => props.handleDelete(props.idx)}><Delete/></Button>\r\n      </TableCell>\r\n      <TableCell className=\"PlayerButton\">\r\n        <ToggleButton\r\n          className=\"TogglePlayerDoneButton\"\r\n          selected={props.player.done}\r\n          onClick={() => props.toggleDone(props.idx)}><Check/></ToggleButton>\r\n      </TableCell>\r\n      <TableCell>{props.player.name}</TableCell>\r\n      <TableCell>{rankDropdown(props)}</TableCell>\r\n      <TableCell>{suitDropdown(props)}</TableCell>\r\n      <TableCell>\r\n        <TextField \r\n          type=\"number\"\r\n          value={props.player.bennies}\r\n          onChange={e => props.updateBen(props.idx, Number(e.target.value))}\r\n          inputProps={{ min: \"0\", max: \"100\", step: \"1\" }} />\r\n      </TableCell>\r\n      <TableCell>\r\n        <TextField \r\n          type=\"number\"\r\n          value={props.player.woundsTaken}\r\n          onChange={e => props.updateWt(props.idx, Number(e.target.value))}\r\n          inputProps={{ min: \"0\", max: \"100\", step: \"1\" }} />\r\n      </TableCell>\r\n      <TableCell>\r\n        <TextField \r\n          type=\"number\"\r\n          value={props.player.fatigueTaken}\r\n          onChange={e => props.updateFt(props.idx, Number(e.target.value))}\r\n          inputProps={{ min: \"0\", max: \"100\", step: \"1\" }} />\r\n      </TableCell>\r\n      <TableCell>\r\n        <TextareaAutosize\r\n              rowsMax=\"4\"\r\n              value={props.player.notes}\r\n              onChange={e => props.updateNotes(props.idx, e.target.value)}\r\n          />\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n};\r\n\r\ninterface option {\r\n  value: number,\r\n  label: string\r\n}\r\n\r\nconst rankDropdown: React.FC<PlayerItemProps> = props => {\r\n  let options = []\r\n\r\n  let i = 0;\r\n  for (let item in Object.keys(Rank)) {\r\n    if (i > Object.keys(Rank).length/2) {\r\n      break;\r\n    }\r\n    options.push({value: Number(item), label: transformRankWord(Rank[item])})\r\n    i++;\r\n  }\r\n\r\n  const selectedOption = {value: props.player.rank, label: transformRankWord(Rank[props.player.rank])}\r\n\r\n\r\n  \r\n  return (\r\n    <FormControl>\r\n    <Select\r\n      value={selectedOption.value}\r\n      onChange={(event: any) => props.updateRank(props.idx, event.target.value)}\r\n    >\r\n      {options.map((item: any) => {\r\n      return <MenuItem value={item.value}>{item.label}</MenuItem>\r\n      })}\r\n    </Select>\r\n  </FormControl>\r\n);\r\n}\r\n\r\nconst transformRankWord = (word: string): string => {\r\n  switch(word) {\r\n    case \"Two\":\r\n      return '2';\r\n    case \"Three\":\r\n      return '3';\r\n    case \"Four\":\r\n      return '4';\r\n    case \"Five\":\r\n      return '5';\r\n    case \"Six\":\r\n      return '6';\r\n    case \"Seven\":\r\n      return '7';\r\n    case \"Eight\":\r\n      return '8';\r\n    case \"Nine\":\r\n      return '9';\r\n    case \"Ten\":\r\n      return '10';          \r\n    default:\r\n      return word;\r\n  }\r\n}\r\n\r\nconst suitDropdown: React.FC<PlayerItemProps> = props => {\r\n  let options: option[] = []\r\n\r\n  let i = 0;\r\n  for (let item in Object.keys(Suit)) {\r\n    if (i > Object.keys(Suit).length/2) {\r\n      break;\r\n    }\r\n    options.push({value: Number(item), label: Suit[item]})\r\n    i++;\r\n  }\r\n\r\n  const selectedOption: option = {value: props.player.suit, label: Suit[props.player.suit]}\r\n\r\n  return (\r\n    <FormControl>\r\n    <Select\r\n      value={selectedOption.value}\r\n      onChange={(event: any) => props.updateSuit(props.idx, event.target.value)}\r\n    >\r\n      {options.map((item: any) => {\r\n      return <MenuItem value={item.value}>{item.label}</MenuItem>\r\n      })}\r\n    </Select>\r\n  </FormControl>\r\n);\r\n}","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { PlayerItem } from \"../components\";\r\n\r\nimport { deletePlayer, addPlayer, updateSuit, updateRank, updateBen, updateFt, updateWt, sortInit, resetInit, updateNotes, togglePlayerDone } from \"../store/players/actions\"\r\nimport {Player} from \"../store/players/types\"\r\nimport { AppState } from \"../store\"\r\nimport { Button, Table, TableBody, TableRow, TableHead, TextField, TableCell, TableFooter } from '@material-ui/core';\r\nimport './PlayersContainer.css';\r\n\r\ninterface PlayersContainerState {\r\n  playerInput: string;\r\n}\r\n\r\ninterface PlayersContainerProps {\r\n  count: number;\r\n  playerList: Player[];\r\n  addPlayer: (item: string) => object;\r\n  deletePlayer: (idx: number) => object;\r\n  sortInit: () => object;\r\n  resetInit: () => object;\r\n  toggleDone: (idx: number) => object;\r\n  updateSuit: (idx: number, num: number) => object;\r\n  updateRank: (idx: number, num: number) => object;\r\n  updateWt: (idx: number, num: number) => object;\r\n  updateFt: (idx: number, num: number) => object;\r\n  updateBen: (idx: number, num: number) => object;\r\n  updateNotes: (idx: number, str: string) => object;\r\n}\r\n\r\nclass PlayersContainer extends React.Component<PlayersContainerProps, PlayersContainerState> {\r\n  constructor(props: PlayersContainerProps) {\r\n    super(props);\r\n    this.state = {\r\n      playerInput: \"\"\r\n    };\r\n  }\r\n\r\n  handleTextChange = (e: any) => {\r\n    this.setState({\r\n      playerInput: e.target.value\r\n    });\r\n  };\r\n\r\n  handleButtonClick = () => {\r\n    this.props.addPlayer(this.state.playerInput);\r\n    this.setState({\r\n      playerInput: \"\"\r\n    });\r\n  };\r\n\r\n  handleDeleteButtonClick = (idx: number) => {\r\n    console.log(\"deleting\", idx);\r\n    this.props.deletePlayer(idx);\r\n  };\r\n\r\n  render() {\r\n    let playerJSX: JSX.Element[] | JSX.Element;\r\n    if (!this.props.playerList.length) {\r\n      playerJSX = <></>;\r\n    } else {\r\n      playerJSX = this.props.playerList.map((item, idx) => {\r\n        return (\r\n          <PlayerItem player={item} key={idx} idx={idx} handleDelete={this.handleDeleteButtonClick}\r\n          toggleDone={this.props.toggleDone}\r\n          updateSuit={this.props.updateSuit} updateRank={this.props.updateRank}\r\n          updateBen={this.props.updateBen} updateFt={this.props.updateFt}\r\n          updateWt={this.props.updateWt}\r\n          updateNotes={this.props.updateNotes} />\r\n        );\r\n      });\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Table size=\"small\" stickyHeader>\r\n            <colgroup>\r\n                <col width=\"1%\" />\r\n                <col width=\"1%\" />\r\n                <col width=\"1%\" />\r\n                <col width=\"1%\" />\r\n                <col width=\"1%\" />\r\n                <col width=\"1%\" />\r\n                <col width=\"1%\" />\r\n                <col width=\"1%\" />\r\n                <col width=\"92%\" />\r\n            </colgroup>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell></TableCell>\r\n                <TableCell></TableCell>\r\n                <TableCell></TableCell>\r\n                <TableCell>Rank</TableCell>\r\n                <TableCell>Suit</TableCell>\r\n                <TableCell>Bennies</TableCell>\r\n                <TableCell>Wounds</TableCell>\r\n                <TableCell>Fatigue</TableCell>\r\n                <TableCell>Notes</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n            {playerJSX}\r\n          </TableBody>\r\n        </Table>\r\n        <div className=\"PlayerControls\">\r\n          <div className=\"PlayerControl\">\r\n            <TextField\r\n              onChange={this.handleTextChange}\r\n              placeholder={\"New Player Here\"}\r\n              value={this.state.playerInput}\r\n            />\r\n            <Button variant=\"contained\" color=\"primary\" onClick={this.handleButtonClick}>Add Player</Button>\r\n          </div>\r\n          <div className=\"PlayerControl\">\r\n            <Button variant=\"contained\" color=\"primary\" onClick={this.props.sortInit}>Sort Initiative</Button>\r\n          </div>\r\n          <div className=\"PlayerControl\">\r\n            <Button variant=\"contained\" color=\"primary\" onClick={this.props.resetInit}>Next Round</Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst MapStateToProps = (store: AppState) => {\r\n  return {\r\n    count: store.players.count,\r\n    playerList: store.players.list\r\n  };\r\n};\r\n\r\nconst MapDispatchToProps = (dispatch: any) => ({\r\n  addPlayer: (item: string) => dispatch(addPlayer(item)),\r\n  deletePlayer: (idx: number) => dispatch(deletePlayer(idx)),\r\n  toggleDone: (idx: number) => dispatch(togglePlayerDone(idx)),\r\n  updateSuit: (idx: number, num: number) => dispatch(updateSuit(idx, num)),\r\n  updateRank: (idx: number, num: number) => dispatch(updateRank(idx, num)),\r\n  updateBen: (idx: number, num: number) => dispatch(updateBen(idx, num)),\r\n  updateWt: (idx: number, num: number) => dispatch(updateWt(idx, num)),\r\n  updateFt: (idx: number, num: number) => dispatch(updateFt(idx, num)),\r\n  updateNotes: (idx: number, str: string) => dispatch(updateNotes(idx, str)),\r\n  sortInit: () => dispatch(sortInit()),\r\n  resetInit: () => dispatch(resetInit()),\r\n});\r\n\r\nexport default connect(\r\n  MapStateToProps,\r\n  MapDispatchToProps\r\n)(PlayersContainer);\r\n","import {ADD_PLAYER, AddPlayerAction, DELETE_PLAYER, DeletePlayerAction, TogglePlayerDoneAction, UpdatePlayerSuitAction, UpdatePlayerRankAction,\r\n     UPDATE_PLAYER_SUIT,\r\n     UPDATE_PLAYER_RANK,\r\n     UpdatePlayerWtAction,\r\n     UpdatePlayerFtAction,\r\n     UpdatePlayerBenAction,\r\n     UPDATE_PLAYER_BEN,\r\n     UPDATE_PLAYER_WT, UPDATE_PLAYER_FT, SortInitAction, SORT_INIT, ResetInitAction, RESET_INIT, UpdatePlayerNotesAction, UPDATE_PLAYER_NOTES, TOGGLE_PLAYER_DONE} from \"./types\";\r\n\r\nexport function addPlayer(name: string): AddPlayerAction {\r\n    return {\r\n        type: ADD_PLAYER,\r\n        payload: name\r\n    };\r\n}\r\n\r\nexport function deletePlayer(num: number): DeletePlayerAction {\r\n    return {\r\n        type: DELETE_PLAYER,\r\n        payload: num\r\n    };\r\n}\r\n\r\nexport function togglePlayerDone(num: number): TogglePlayerDoneAction {\r\n    return {\r\n        type: TOGGLE_PLAYER_DONE,\r\n        payload: num\r\n    };\r\n}\r\n\r\nexport function updateSuit(player: number, suit: number): UpdatePlayerSuitAction {\r\n    return {\r\n        type: UPDATE_PLAYER_SUIT,\r\n        payload: {\r\n            player: player,\r\n            num: suit\r\n        }\r\n    };\r\n}\r\n\r\nexport function updateRank(player: number, rank: number): UpdatePlayerRankAction {\r\n    return {\r\n        type: UPDATE_PLAYER_RANK,\r\n        payload: {\r\n            player: player,\r\n            num: rank\r\n        }\r\n    };\r\n}\r\n\r\nexport function updateWt(player: number, wt: number): UpdatePlayerWtAction {\r\n    return {\r\n        type: UPDATE_PLAYER_WT,\r\n        payload: {\r\n            player: player,\r\n            num: wt\r\n        }\r\n    };\r\n}\r\n\r\nexport function updateFt(player: number, ft: number): UpdatePlayerFtAction {\r\n    return {\r\n        type: UPDATE_PLAYER_FT,\r\n        payload: {\r\n            player: player,\r\n            num: ft\r\n        }\r\n    };\r\n}\r\n\r\nexport function updateBen(player: number, ben: number): UpdatePlayerBenAction {\r\n    return {\r\n        type: UPDATE_PLAYER_BEN,\r\n        payload: {\r\n            player: player,\r\n            num: ben\r\n        }\r\n    };\r\n}\r\n\r\nexport function updateNotes(player: number, notes: string): UpdatePlayerNotesAction {\r\n    return {\r\n        type: UPDATE_PLAYER_NOTES,\r\n        payload: {\r\n            player: player,\r\n            str: notes\r\n        }\r\n    };\r\n}\r\n\r\nexport function sortInit(): SortInitAction {\r\n    return {\r\n        type: SORT_INIT\r\n    };\r\n}\r\n\r\nexport function resetInit(): ResetInitAction {\r\n    return {\r\n        type: RESET_INIT\r\n    };\r\n}","import { PlayerActionTypes, PlayersState, ADD_PLAYER, DELETE_PLAYER, UPDATE_PLAYER_SUIT, UPDATE_PLAYER_RANK,\r\n     Player, Rank, Suit, UPDATE_PLAYER_BEN, UPDATE_PLAYER_WT, UPDATE_PLAYER_FT, SORT_INIT, RESET_INIT, UPDATE_PLAYER_NOTES, TOGGLE_PLAYER_DONE } from \"./types\"\r\n\r\nconst initialState: PlayersState = {\r\n    count: 2,\r\n    list: []\r\n}\r\n\r\nexport function playersReducer(\r\n    state = initialState,\r\n    action: PlayerActionTypes\r\n): PlayersState {\r\n    switch (action.type) {\r\n        case ADD_PLAYER:\r\n            const player: Player = {\r\n                name: action.payload,\r\n                bennies: 0,\r\n                done: false,\r\n                woundsTaken: 0,\r\n                fatigueTaken: 0,\r\n                notes: \"\",\r\n                rank: Rank.NA,\r\n                suit: Suit.NA\r\n            }\r\n            return {\r\n                ...state,\r\n                count: state.count + 1,\r\n                list: [...state.list, player]\r\n            };\r\n        case DELETE_PLAYER:\r\n            const oldList = [...state.list];\r\n            oldList.splice(action.payload, 1);\r\n            const newList = oldList;\r\n\r\n            return {\r\n                ...state,\r\n                count: state.count - 1,\r\n                list: newList\r\n            };\r\n        case TOGGLE_PLAYER_DONE: \r\n            const doneList = [...state.list]; \r\n            doneList[action.payload].done = !doneList[action.payload].done;\r\n            return {\r\n                ...state,\r\n                list: doneList\r\n            };\r\n        case UPDATE_PLAYER_SUIT:\r\n            const suitList = [...state.list]; \r\n            suitList[action.payload.player].suit = action.payload.num;\r\n            return {\r\n                ...state,\r\n                list: suitList\r\n            };\r\n        case UPDATE_PLAYER_RANK:\r\n            const rankList = [...state.list]; \r\n            rankList[action.payload.player].rank = action.payload.num;\r\n            return {\r\n                ...state,\r\n                list: rankList\r\n            };\r\n        case UPDATE_PLAYER_BEN:\r\n            const benlist = [...state.list]; \r\n            benlist[action.payload.player].bennies = action.payload.num;\r\n            return {\r\n                ...state,\r\n                list: benlist\r\n            };\r\n        case UPDATE_PLAYER_WT:\r\n            const wtlist = [...state.list]; \r\n            wtlist[action.payload.player].woundsTaken = action.payload.num;\r\n            return {\r\n                ...state,\r\n                list: wtlist\r\n            };\r\n        case UPDATE_PLAYER_FT:\r\n            const ftlist = [...state.list]; \r\n            ftlist[action.payload.player].fatigueTaken = action.payload.num;\r\n            return {\r\n                ...state,\r\n                list: ftlist\r\n            };\r\n        case UPDATE_PLAYER_NOTES:\r\n            const notelist = [...state.list]; \r\n            notelist[action.payload.player].notes = action.payload.str;\r\n            return {\r\n                ...state,\r\n                list: notelist\r\n            };\r\n        case RESET_INIT:\r\n            const resetlist = [...state.list];\r\n            resetlist.forEach(p => {\r\n                p.rank = Rank.NA\r\n                p.suit = Suit.NA\r\n                p.done = false\r\n            });\r\n\r\n            return {\r\n                ...state,\r\n                list: resetlist\r\n            };\r\n        case SORT_INIT:\r\n            const sortList = [...state.list];\r\n            sortList.sort((a, b) => (a.rank > b.rank) ? -1 : (a.rank === b.rank) ? ((a.suit > b.suit) ? -1 : 1) : 1 )\r\n            return {\r\n                ...state,\r\n                list: sortList\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import {playersReducer} from \"./players/reducers\"\r\nimport { combineReducers, createStore } from \"redux\"\r\n\r\nconst rootReducer = combineReducers({\r\n    players: playersReducer\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport default function configureStore() {\r\n    return createStore(rootReducer);\r\n}","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport { App } from \"./App\";\r\nimport configureStore from \"./store\";\r\n\r\nconst store = configureStore();\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);","import * as React from \"react\";\r\nimport PlayersContainer from \"./containers/PlayersContainer\";\r\nimport { Typography } from '@material-ui/core';\r\n\r\nexport const App: React.FC<{}> = () => {\r\n  return (\r\n    <>\r\n      <PlayersContainer/>\r\n    </>\r\n  );\r\n};"],"sourceRoot":""}